from flask import Flask, request, render_template_string
import openai
import os

# Set your OpenAI API Key
openai.api_key = "your_openai_api_key_here"  # Replace this with your actual key

app = Flask(__name__)

HTML_PAGE = """
<!DOCTYPE html>
<html>
<head>
    <title>AI Resume Builder</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        textarea { width: 100%; height: 100px; }
        pre { background-color: #f4f4f4; padding: 15px; white-space: pre-wrap; }
    </style>
</head>
<body>
    <h1>AI Resume Builder</h1>
    <form method="POST">
        <label><strong>Name:</strong></label><br>
        <input type="text" name="name" required><br><br>

        <label><strong>Job Title:</strong></label><br>
        <input type="text" name="job_title" required><br><br>

        <label><strong>Skills (comma-separated):</strong></label><br>
        <textarea name="skills" required></textarea><br><br>

        <label><strong>Work Experience:</strong></label><br>
        <textarea name="experience" required></textarea><br><br>

        <button type="submit">Generate Resume</button>
    </form>

    {% if resume %}
        <h2>Generated Resume:</h2>
        <pre>{{ resume }}</pre>
    {% endif %}
</body>
</html>
"""

@app.route('/', methods=['GET', 'POST'])
def index():
    resume = None
    if request.method == 'POST':
        name = request.form['name']
        job_title = request.form['job_title']
        skills = request.form['skills']
        experience = request.form['experience']

        prompt = f"""
        Create a professional resume for the following individual:

        Name: {name}
        Desired Job Title: {job_title}
        Skills: {skills}
        Work Experience: {experience}

        Format the resume with sections like Summary, Skills, Experience, and Education. Keep it concise and professional.
        """

        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a professional resume writer."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=800
            )
            resume = response['choices'][0]['message']['content']
        except Exception as e:
            resume = f"Error: {e}"

    return render_template_string(HTML_PAGE, resume=resume)

if __name__ == '__main__':
    app.run(debug=True)

